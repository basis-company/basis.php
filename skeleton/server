#!/usr/local/bin/php
<?php

use Basis\Application;
use Basis\Container;
use Basis\Http;
use Basis\Metric\BackgroundHold;
use Basis\Metric\BackgroundStart;
use Basis\Metric\MemoryUsage;
use Basis\Metric\Registry;
use Basis\Metric\Uptime;
use Psr\Log\LoggerInterface;
use Swoole\Coroutine;
use Swoole\Coroutine\Scheduler;
use Swoole\Http\Server;
use Swoole\Process;

include "vendor/autoload.php";

ini_set('date.timezone', 'Europe/Moscow');

Swoole\Runtime::enableCoroutine();
$startTime = microtime(true);

$thread = new Application();
$server = $thread->get(Server::class);

$server->tick(1000, function () use ($thread, $startTime) {
    $thread->get(BackgroundHold::class)->update();
    $thread->get(MemoryUsage::class)->update();
    $thread->get(Uptime::class)->update($startTime);
});

$logger = $thread->get(LoggerInterface::class);
$registry = $thread->get(Registry::class);

$server->on('request', function ($request, $response) use ($registry, $logger, $server) {
    if (getenv('BASIS_ENVIRONMENT') === 'dev') {
        opcache_reset();
        $server->reload();
    }

    $coroutine = new Application();
    $coroutine->getContainer()->share(LoggerInterface::class, $logger);
    $coroutine->getContainer()->share(Registry::class, $registry);
    $coroutine->getContainer()->share(Server::class, $server);

    try {
        $coroutine->get(Basis\Metric\RequestCounter::class)->increment();
        $coroutine->get(Http::class)->swoole($request, $response);
        $coroutine->finalize();

    } catch (Throwable $e) {
        $logger->info($e->getMessage() . PHP_EOL . $e->getTraceAsString());

        $coroutine->finalize();
    }
});

if (file_exists('php/Job/Background.php')) {
    $server->addProcess(new Process(function ($process) use ($registry, $logger) {
        $coroutine = new Application();
        $scheduler = new Scheduler();

        $coroutine->getContainer()
            ->share(LoggerInterface::class, $logger)
            ->share(Process::class, $process)
            ->share(Registry::class, $registry)
            ->share(Scheduler::class, $scheduler);

        $process->name($coroutine->getName().'-background');

        $scheduler->add(function () use ($coroutine) {
            while (true) {
                $coroutine->get(BackgroundStart::class)->update();
                $coroutine->get(BackgroundHold::class)->update();
                $coroutine->dispatch('background');
            }
        });

        $scheduler->start();
    }));
}

$server->start();
