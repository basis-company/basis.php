#!/usr/local/bin/php
<?php

use Basis\Application;
use Basis\Container;
use Basis\Http;
use Basis\Metric\Registry;
use Psr\Log\LoggerInterface;
use Swoole\Http\Server;

include "vendor/autoload.php";

ini_set('date.timezone', 'Europe/Moscow');

Swoole\Runtime::enableCoroutine();
$startTime = microtime(true);

$thread = new Application();
$server = $thread->get(Server::class);

$server->tick(500, function () use ($thread, $startTime) {
    $thread->get(Basis\Metric\MemoryUsage::class)
        ->update();

    $thread->get(Basis\Metric\Uptime::class)
        ->update($startTime);
});

$registry = $thread->get(Registry::class);

$server->on('request', function ($request, $response) use ($registry, $server) {
    if (getenv('BASIS_ENVIRONMENT') === 'dev') {
        opcache_reset();
        $server->reload();
    }

    $coroutine = new Application();
    $coroutine->getContainer()->share(Registry::class, $registry);
    $coroutine->getContainer()->share(Server::class, $server);

    try {
        $coroutine->get(Basis\Metric\RequestCounter::class)->increment();
        $coroutine->get(Http::class)->swoole($request, $response);
        $coroutine->finalize();

    } catch (Throwable $e) {
        $logger = $coroutine->get(LoggerInterface::class);
        $logger->info($e->getMessage() . PHP_EOL . $e->getTraceAsString());

        $coroutine->finalize();
    }
});

$server->start();
