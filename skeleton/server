#!/usr/local/bin/php
<?php

use Basis\Application;
use Basis\Container;
use Basis\Http;
use Basis\Metric\BackgroundHold;
use Basis\Metric\BackgroundStart;
use Basis\Metric\JobQueueLength;
use Basis\Metric\Registry;
use Basis\Metric\RequestCounter;
use Basis\Metric\RequestTotalTime;
use Basis\Metric\Uptime;
use Psr\Log\LoggerInterface;
use Swoole\Http\Server;
use Swoole\Process;
use Symfony\Component\Yaml\Yaml;
use Tarantool\Client\Client;

include "vendor/autoload.php";

ini_set('date.timezone', 'Europe/Moscow');

$startTime = microtime(true);
$app = new Application();
$server = $app->get(Server::class);

$server->tick(1000, function () use ($app, $startTime) {
    $app->get(BackgroundHold::class)->update();
    $app->get(Uptime::class)->update($startTime);
    if (getenv('SERVICE_JOB_QUEUE_METRIC') !== 'false') {
        $client = $app->get(Client::class);
        $app->get(JobQueueLength::class)->update($client);
    }
});

$logger = $app->get(LoggerInterface::class);
$registry = $app->get(Registry::class);

// register all metrics
$metrics = $app->get(Basis\Registry::class)->listClasses('metric');
foreach ($metrics as $metric) {
    if (method_exists($metric, 'getValue')) {
        $app->get($metric)->getValue();
    }
}

$server->on('request', function ($request, $response) use ($app, $logger) {
    try {
        $start = microtime(true);
        $app->get(RequestCounter::class)->increment();
        $app->get(Http::class)->swoole($request, $response);
        $requestTime = microtime(true) - $start;
        $app->get(RequestTotalTime::class)->increment($requestTime);

    } catch (Throwable $e) {
        $logger->info([
            'message' => $e->getMessage(),
            'trace' => $e->getTraceAsString(),
        ]);
    }

    $app->dispatch('module.housekeeping');
});

if (file_exists('php/Job/Background.php')) {
    $server->addProcess(new Process(function ($process) use ($registry, $logger) {
        $background = new Application();
        $background->getContainer()
            ->share(LoggerInterface::class, $logger)
            ->share(Process::class, $process)
            ->share(Registry::class, $registry);

        $iteration = 128;
        $process->name('background');

        while ($iteration--) {
            $background->get(BackgroundStart::class)->update();
            $background->get(BackgroundHold::class)->update();
            $background->dispatch('module.process', [ 'job' => 'background' ]);
            $background->dispatch('module.sleep', [ 'seconds' => 1 ]);
        }
    }));
}

if (getenv('SERVICE_EXECUTOR') !== 'false') {
    $server->addProcess(new Process(function ($process) use ($registry, $logger) {
        $executor = new Application();
        $executor->getContainer()
            ->share(LoggerInterface::class, $logger)
            ->share(Process::class, $process)
            ->share(Registry::class, $registry);

        $iteration = 128;
        $process->name('executor');

        while ($iteration--) {
            $executor->dispatch('module.recover');
            $executor->dispatch('module.process', [ 'job' => 'module.execute' ]);
            $executor->dispatch('module.sleep', [ 'seconds' => 0.5 ]);
        }
    }));
}

$server->start();
